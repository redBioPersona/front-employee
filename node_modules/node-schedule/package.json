{
  "_args": [
    [
      {
        "raw": "node-schedule@^1.3.1",
        "scope": null,
        "escapedName": "node-schedule",
        "name": "node-schedule",
        "rawSpec": "^1.3.1",
        "spec": ">=1.3.1 <2.0.0",
        "type": "range"
      },
      "D:\\webFinger\\MeteorMBES"
    ]
  ],
  "_from": "node-schedule@^1.3.1",
  "_hasShrinkwrap": false,
  "_id": "node-schedule@1.3.3",
  "_location": "/node-schedule",
  "_nodeVersion": "14.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-schedule_1.3.3_1611949739309_0.5016496835373914"
  },
  "_npmUser": {
    "name": "kibertoad",
    "email": "iselwin@gmail.com"
  },
  "_npmVersion": "6.14.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-schedule@^1.3.1",
    "scope": null,
    "escapedName": "node-schedule",
    "name": "node-schedule",
    "rawSpec": "^1.3.1",
    "spec": ">=1.3.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-schedule/-/node-schedule-1.3.3.tgz",
  "_shasum": "f8e01c5fb9597f09ecf9c4c25d6938e5e7a06f48",
  "_shrinkwrap": null,
  "_spec": "node-schedule@^1.3.1",
  "_where": "D:\\webFinger\\MeteorMBES",
  "author": {
    "name": "Matt Patenaude",
    "email": "matt@mattpatenaude.com",
    "url": "http://mattpatenaude.com"
  },
  "bugs": {
    "url": "https://github.com/node-schedule/node-schedule/issues"
  },
  "contributors": [
    {
      "name": "Igor Savin",
      "email": "kibertoad@gmail.com"
    }
  ],
  "dependencies": {
    "cron-parser": "^2.18.0",
    "long-timeout": "0.1.1",
    "sorted-array-functions": "^1.3.0"
  },
  "description": "A cron-like and not-cron-like job scheduler for Node.",
  "devDependencies": {
    "eslint": "^7.18.0",
    "istanbul": "^0.4.5",
    "nodeunit": "~0.10.2",
    "sinon": "^2.4.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-uF9Ubn6luOPrcAYKfsXWimcJ1tPFtQ8I85wb4T3NgJQrXazEzojcFZVk46ZlLHby3eEJChgkV/0T689IsXh2Gw==",
    "shasum": "f8e01c5fb9597f09ecf9c4c25d6938e5e7a06f48",
    "tarball": "https://registry.npmjs.org/node-schedule/-/node-schedule-1.3.3.tgz",
    "fileCount": 5,
    "unpackedSize": 30321,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgFGarCRA9TVsSAnZWagAAc8AP/0JEvu6WWwKp7Myg/A/g\nlrxNE9hhii5dh2MEkR+hjnQcZ/ZMKLqrkhecVbcurovuDSkEBxjjCmwB8+z6\nFN1BS6hW1zDnWXkK3bWZIo3SOrugeSDUMfT2q3TBrdLH2Si4ZZ9yFbKNlJwa\ndzYJVrMso4hspD0Xa61S97l3K5ek7xCsyFkPFOAgQ300s6VbjsKzKDpJNXdl\npS+nZttOrOX1w2T4tCnCkcSxmPMFeSLtO9SiO97NK+zIzrpdB2KwB5fJcwO1\nwgRUY5qC/8FqwDZ+l16PU2v0LcNa539mbka4rfOtHtirEwZ6GX9t46Ewe3Ub\nmq5/PBsNTaeMi29ha6TvLFmNpx7t2eUFFA+24JVCUqKV137ypuCpuXcv9gPm\nDFTAGD8nW21tcfYrzlab2reiby/4F98EwGwj2xf+Xq01c40di9ZZdoCHuXNR\nnwEYqt/GaWZtnVQYSoXC1a7vuE7hZBAiBQfDIsOr4MEMkbf1ftQUedkoglKz\nbw+x6XYUJdqzePIE2Ge1jWPAeIZz3p8lMw8/OaX68fGq3kUBmNqXeZZ6v1xG\no2Pf+fUf/ArOCaI4/6h14KHAk/n2p1qYhxM4hGYZlUXJdT961kaof1y0r1+3\n9o6l+8t42oCeSiNr/67RVuyKxQAkqee09wlkKPlJ/wk6jNHFi4D/G+8+A63Q\nnBR9\r\n=hLCL\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "README.md",
    "LICENSE",
    "lib/*"
  ],
  "gitHead": "ad7f7b8034311bc77b7610c23b58fe19fa6a8828",
  "homepage": "https://github.com/node-schedule/node-schedule#readme",
  "keywords": [
    "schedule",
    "task",
    "job",
    "cron",
    "in-memory"
  ],
  "license": "MIT",
  "main": "./lib/schedule.js",
  "maintainers": [
    {
      "name": "mattpat",
      "email": "matt@mattpatenaude.com"
    },
    {
      "name": "sgimeno",
      "email": "santiago.gimeno@gmail.com"
    },
    {
      "name": "tejasmanohar",
      "email": "me@tejas.io"
    },
    {
      "name": "jonhester",
      "email": "jon@hester.io"
    },
    {
      "name": "kibertoad",
      "email": "iselwin@gmail.com"
    }
  ],
  "name": "node-schedule",
  "optionalDependencies": {},
  "readme": "# Node Schedule\n\n[![NPM version](http://img.shields.io/npm/v/node-schedule.svg)](https://www.npmjs.com/package/node-schedule)\n[![Downloads](https://img.shields.io/npm/dm/node-schedule.svg)](https://www.npmjs.com/package/node-schedule)\n[![Build Status](https://github.com/node-schedule/node-schedule/workflows/ci/badge.svg)](https://github.com/node-schedule/node-schedule/actions)\n[![Coverage Status](https://coveralls.io/repos/node-schedule/node-schedule/badge.svg?branch=master)](https://coveralls.io/r/node-schedule/node-schedule?branch=master)\n[![Join the chat at https://gitter.im/node-schedule/node-schedule](https://img.shields.io/badge/gitter-chat-green.svg)](https://gitter.im/node-schedule/node-schedule?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM](https://nodei.co/npm/node-schedule.png?downloads=true)](https://nodei.co/npm/node-schedule/)\n\nNode Schedule is a flexible cron-like and not-cron-like job scheduler for Node.js.\nIt allows you to schedule jobs (arbitrary functions) for execution at\nspecific dates, with optional recurrence rules. It only uses a single timer\nat any given time (rather than reevaluating upcoming jobs every second/minute).\n\n## Usage\n\n### Installation\n\nYou can install using [npm](https://www.npmjs.com/package/node-schedule).\n\n```\nnpm install node-schedule\n```\n\n### Overview\n\nNode Schedule is for time-based scheduling, not interval-based scheduling.\nWhile you can easily bend it to your will, if you only want to do something like\n\"run this function every 5 minutes\", you'll find `setInterval` much easier to use,\nand far more appropriate. But if you want to, say, \"run this function at the :20\nand :50 of every hour on the third Tuesday of every month,\" you'll find that\nNode Schedule suits your needs better. Additionally, Node Schedule has Windows\nsupport unlike true cron since the node runtime is now fully supported.\n\nNote that Node Schedule is designed for in-process scheduling, i.e. scheduled jobs\nwill only fire as long as your script is running, and the schedule will disappear\nwhen execution completes. If you need to schedule jobs that will persist even when\nyour script *isn't* running, consider using actual [cron].\n\n### Jobs and Scheduling\n\nEvery scheduled job in Node Schedule is represented by a `Job` object. You can\ncreate jobs manually, then execute the `schedule()` method to apply a schedule,\nor use the convenience function `scheduleJob()` as demonstrated below.\n\n`Job` objects are `EventEmitter`s, and emit the following events:\n* A `run` event after each execution.\n* A `scheduled` event each time they're scheduled to run.\n* A `canceled` event when an invocation is canceled before it's executed.  \n  Note that `canceled` is the single-L American spelling.\n* An `error` event when a job invocation triggered by a schedule throws or returns\n  a rejected `Promise`.\n\n(Both the `scheduled` and `canceled` events receive a JavaScript date object as\na parameter).  \nNote that jobs are scheduled the first time immediately, so if you create a job\nusing the `scheduleJob()` convenience method, you'll miss the first `scheduled`\nevent, but you can query the invocation manually (see below).\n\n### Cron-style Scheduling\n\nThe cron format consists of:\n```\n*    *    *    *    *    *\n┬    ┬    ┬    ┬    ┬    ┬\n│    │    │    │    │    │\n│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)\n│    │    │    │    └───── month (1 - 12)\n│    │    │    └────────── day of month (1 - 31)\n│    │    └─────────────── hour (0 - 23)\n│    └──────────────────── minute (0 - 59)\n└───────────────────────── second (0 - 59, OPTIONAL)\n```\n\nExamples with the cron format:\n\n```js\nvar schedule = require('node-schedule');\n\nvar j = schedule.scheduleJob('42 * * * *', function(){\n  console.log('The answer to life, the universe, and everything!');\n});\n```\n\nExecute a cron job when the minute is 42 (e.g. 19:42, 20:42, etc.).\n\nAnd:\n\n```js\nvar j = schedule.scheduleJob('0 17 ? * 0,4-6', function(){\n  console.log('Today is recognized by Rebecca Black!');\n});\n```\n\nExecute a cron job every 5 Minutes = */5 * * * *\n\nYou can also get when it is scheduled to run for every invocation of the job:\n```js\nvar j = schedule.scheduleJob('0 1 * * *', function(fireDate){\n  console.log('This job was supposed to run at ' + fireDate + ', but actually ran at ' + new Date());\n});\n```\nThis is useful when you need to check if there is a delay of the job invocation when the system is busy, or save a record of all invocations of a job for audit purpose.\n#### Unsupported Cron Features\n\nCurrently, `W` (nearest weekday) and `L` (last day of month/week) are not supported. \nMost other features supported by popular cron implementations should work just fine, \nincluding `#` (nth weekday of the month).\n\n[cron-parser] is used to parse crontab instructions.\n\n### Date-based Scheduling\n\nSay you very specifically want a function to execute at 5:30am on December 21, 2012.\nRemember - in JavaScript - 0 - January, 11 - December.\n\n```js\nvar schedule = require('node-schedule');\nvar date = new Date(2012, 11, 21, 5, 30, 0);\n\nvar j = schedule.scheduleJob(date, function(){\n  console.log('The world is going to end today.');\n});\n```\n\nTo use current data in the future you can use binding:\n\n```js\nvar schedule = require('node-schedule');\nvar date = new Date(2012, 11, 21, 5, 30, 0);\nvar x = 'Tada!';\nvar j = schedule.scheduleJob(date, function(y){\n  console.log(y);\n}.bind(null,x));\nx = 'Changing Data';\n```\nThis will log 'Tada!' when the scheduled Job runs, rather than 'Changing Data',\nwhich x changes to immediately after scheduling.\n\n### Recurrence Rule Scheduling\n\nYou can build recurrence rules to specify when a job should recur. For instance,\nconsider this rule, which executes the function every hour at 42 minutes after the hour:\n\n```js\nvar schedule = require('node-schedule');\n\nvar rule = new schedule.RecurrenceRule();\nrule.minute = 42;\n\nvar j = schedule.scheduleJob(rule, function(){\n  console.log('The answer to life, the universe, and everything!');\n});\n```\n\nYou can also use arrays to specify a list of acceptable values, and the `Range`\nobject to specify a range of start and end values, with an optional step parameter.\nFor instance, this will print a message on Thursday, Friday, Saturday, and Sunday at 5pm:\n\n```js\nvar rule = new schedule.RecurrenceRule();\nrule.dayOfWeek = [0, new schedule.Range(4, 6)];\nrule.hour = 17;\nrule.minute = 0;\n\nvar j = schedule.scheduleJob(rule, function(){\n  console.log('Today is recognized by Rebecca Black!');\n});\n```\n\nTimezones are also supported. Here is an example of executing at the start of every day in the UTC timezone.\n\n```js\nvar rule = new schedule.RecurrenceRule();\nrule.hour = 0;\nrule.tz = 'Etc/UTC';\n\nvar j = schedule.scheduleJob(rule, function(){\n  console.log('A new day has begun in the UTC timezone!');\n});\n```\n\nA list of acceptable tz (timezone) values can be found at <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>\n\n#### RecurrenceRule properties\n\n- `second (0-59)`\n- `minute (0-59)`\n- `hour  (0-23)`\n- `date  (1-31)`\n- `month (0-11)`\n- `year`\n- `dayOfWeek (0-6) Starting with Sunday`\n- `tz`\n\n\n> **Note**: It's worth noting that the default value of a component of a recurrence rule is\n> `null` (except for second, which is 0 for familiarity with cron). *If we did not\n> explicitly set `minute` to 0 above, the message would have instead been logged at\n> 5:00pm, 5:01pm, 5:02pm, ..., 5:59pm.* Probably not what you want.\n\n#### Object Literal Syntax\n\nTo make things a little easier, an object literal syntax is also supported, like\nin this example which will log a message every Sunday at 2:30pm:\n\n```js\nvar j = schedule.scheduleJob({hour: 14, minute: 30, dayOfWeek: 0}, function(){\n  console.log('Time for tea!');\n});\n```\n\n#### Set StartTime and EndTime\n\nIt will run after 5 seconds and stop after 10 seconds in this example.\nThe ruledat supports the above.\n\n```js\nlet startTime = new Date(Date.now() + 5000);\nlet endTime = new Date(startTime.getTime() + 5000);\nvar j = schedule.scheduleJob({ start: startTime, end: endTime, rule: '*/1 * * * * *' }, function(){\n  console.log('Time for tea!');\n});\n```\n\n### Handle Jobs and Job Invocations\n\nThere are some function to get information for a Job and to handle the Job and\nInvocations.\n\n\n#### job.cancel(reschedule)\nYou can invalidate any job with the `cancel()` method:\n\n```js\nj.cancel();\n```\nAll planned invocations will be canceled. When you set the parameter ***reschedule***\nto true then the Job is newly scheduled afterwards.\n\n#### job.cancelNext(reschedule)\nThis method invalidates the next planned invocation or the job.\nWhen you set the parameter ***reschedule*** to true then the Job is newly scheduled\nafterwards.\n\n#### job.reschedule(spec)\nThis method cancels all pending invocation and registers the Job completely new again using the given specification.\nReturn true/false on success/failure.\n\n#### job.nextInvocation()\nThis method returns a Date object for the planned next Invocation for this Job. If no invocation is planned the method returns null.\n\n## Contributing\n\nThis module was originally developed by [Matt Patenaude] who eventually passed over maintainer's mantle over to [Tejas Manohar].   \n\nCurrently it is being maintained by [Igor Savin] and [our amazing community].\n\nWe'd love to get your contributions. Individuals making significant and valuable\ncontributions are given commit-access to the project to contribute as they see fit.\n\nBefore jumping in, check out our [Contributing] page guide!\n\n## Copyright and license\n\nCopyright 2015 Matt Patenaude.\n\nLicensed under the **[MIT License] [license]**.\n\n\n[cron]: http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n[Contributing]: https://github.com/node-schedule/node-schedule/blob/master/CONTRIBUTING.md\n[Matt Patenaude]: https://github.com/mattpat\n[Tejas Manohar]: http://tejas.io\n[Igor Savin]: https://twitter.com/kibertoad\n[license]: https://github.com/node-schedule/node-schedule/blob/master/LICENSE\n[Tejas Manohar]: https://github.com/tejasmanohar\n[our amazing community]: https://github.com/node-schedule/node-schedule/graphs/contributors\n[cron-parser]: https://github.com/harrisiirak/cron-parser\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/node-schedule/node-schedule.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "eslint --fix lib test",
    "test": "nodeunit",
    "test:coverage": "istanbul cover ./node_modules/.bin/nodeunit test",
    "test:coverage-win": "istanbul cover ./node_modules/nodeunit/bin/nodeunit test"
  },
  "version": "1.3.3"
}
